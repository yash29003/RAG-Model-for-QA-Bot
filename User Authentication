//User Authentication for Custom API Integrations
# Import necessary libraries
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from passlib.context import CryptContext
import jwt
from datetime import datetime, timedelta
from typing import Optional

# Create FastAPI instance
app = FastAPI()

# JWT Secret key and algorithm (Make sure to store this securely in a real-world application)
SECRET_KEY = "YOUR_SECRET_KEY"  # Replace with a more secure key
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30  # Token expiry time

# Password hashing context using bcrypt algorithm
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# OAuth2 scheme to handle token generation and validation
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Simulating a basic user database (replace with a real database in production)
fake_users_db = {
    "testuser": {
        "username": "testuser",
        "full_name": "Test User",
        "email": "testuser@example.com",
        "hashed_password": pwd_context.hash("password123"),
        "disabled": False,
    }
}

# Class for user data (we extract data from the fake database)
class User:
    def _init_(self, username: str, full_name: str, email: str, disabled: bool):
        self.username = username
        self.full_name = full_name
        self.email = email
        self.disabled = disabled

# Utility function to get user from the fake database
def get_user(db, username: str):
    user = db.get(username)
    if user:
        return User(**user)  # Returns a User object from user data

# Function to verify password (plaintext vs hashed password)
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

# Authenticate user by checking username and password
def authenticate_user(db, username: str, password: str):
    user = get_user(db, username)
    if not user or not verify_password(password, fake_users_db[username]["hashed_password"]):
        return False  # If user does not exist or password does not match
    return user  # If authenticated, return user object

# Create a JWT access token with expiry
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta  # Set expiry time for token
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)  # Default expiry 15 minutes
    to_encode.update({"exp": expire})  # Include expiry in the token payload
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)  # Encode payload to create JWT token
    return encoded_jwt

# Route to authenticate and generate token (token is returned on successful login)
@app.post("/token")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    # Authenticate the user with provided credentials
    user = authenticate_user(fake_users_db, form_data.username, form_data.password)
    if not user:  # If authentication fails
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    # If authentication is successful, create the JWT access token
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user.username}, expires_delta=access_token_expires
    )
    # Return the token to the client
    return {"access_token": access_token, "token_type": "bearer"}

# Decode the JWT token to get the user data
def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")  # Extract the username from the token
        if username is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid token",
                headers={"WWW-Authenticate": "Bearer"},
            )
        return username
    except jwt.PyJWTError:  # Handle token decoding errors
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
            headers={"WWW-Authenticate": "Bearer"},
        )

# Fetch the current user from the token
async def get_current_user(token: str = Depends(oauth2_scheme)):
    username = decode_access_token(token)  # Decode token and get username
    user = get_user(fake_users_db, username)  # Fetch user from the database
    if user is None:  # If user is not found
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return user

# Protected route that can only be accessed by authenticated users
@app.get("/users/me")
async def read_users_me(current_user: User = Depends(get_current_user)):
    # Return the authenticated user's data
    return {"username": current_user.username, "full_name": current_user.full_name}
