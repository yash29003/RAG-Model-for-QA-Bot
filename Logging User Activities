import logging
from logging.handlers import RotatingFileHandler
from fastapi import FastAPI, Request
from starlette.middleware.base import BaseHTTPMiddleware
import time

# Create FastAPI app instance
app = FastAPI()

# Setup logging
# Log format includes timestamp, logger name, log level, and message
log_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# File to store logs, with a rotating file handler to avoid large files
log_file = "user_activity.log"

# RotatingFileHandler will limit each log file to 10MB and keep 3 backup files
handler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=3)
handler.setFormatter(log_formatter)
handler.setLevel(logging.INFO)  # Set the minimum log level to INFO

# Create a logger instance
logger = logging.getLogger('user_activity_logger')
logger.setLevel(logging.INFO)  # Set logging level to INFO for all logs
logger.addHandler(handler)  # Add the handler to the logger

# Middleware to log requests and responses
class LoggingMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        # Start time of the request (to calculate processing time)
        start_time = time.time()

        # Extract client information for logging
        client_ip = request.client.host  # Get the client IP address
        request_method = request.method  # HTTP method (GET, POST, etc.)
        request_url = request.url.path  # Path of the requested URL
        user_agent = request.headers.get('user-agent', 'unknown')  # User-Agent header

        # Process the request (pass it to the next layer)
        response = await call_next(request)

        # End time of the request
        process_time = time.time() - start_time  # Calculate the total time taken
        process_time = round(process_time, 4)  # Round the time for better readability

        # Log the details: IP, method, URL, user-agent, time taken, and response status
        logger.info(f"IP: {client_ip}, Method: {request_method}, URL: {request_url}, "
                    f"User-Agent: {user_agent}, Time Taken: {process_time}s, "
                    f"Status Code: {response.status_code}")

        # Return the response to the client
        return response

# Add middleware to FastAPI app
app.add_middleware(LoggingMiddleware)

# Sample route 1: Hello world endpoint
@app.get("/hello")
async def hello():
    """
    A simple hello world endpoint.
    Logs the request details like method, URL, and user-agent.
    """
    return {"message": "Hello, World!"}

# Sample route 2: Test endpoint
@app.get("/test")
async def test_endpoint():
    """
    A test endpoint to demonstrate logging.
    Logs the request details for this endpoint as well.
    """
    return {"message": "This is a test endpoint"}

# Sample route 3: User info endpoint (fake example)
@app.get("/user/{user_id}")
async def get_user(user_id: int):
    """
    Simulates a user detail endpoint.
    Logs the request method, user ID accessed, and user-agent.
    """
    return {"message": f"User ID: {user_id}"}
